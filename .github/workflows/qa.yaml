name: QA

on:
  push:
    branches:
      - main
  pull_request:
    branches:
        - main

env:
  dependencies: g++-13 cmake
  compiler-C: gcc-13
  compiler-CXX: g++-13

jobs:
  quality:
    name: Build and test C++
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        profile: [Debug, Release]
        sanitize: ["sanitizer_enabled", "sanitizer_disabled"]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Install dependencies
        shell: bash
        run: |
          DEBIAN_FRONTEND=noninteractive sudo apt update
          DEBIAN_FRONTEND=noninteractive sudo apt install -y ${{ env.dependencies }}
      - name: Build
        shell: bash
        run: |
          set -eu

          if [ "${{ matrix.sanitize }}" = "sanitizer_enabled" ]; then
            export ENABLE_SANITIZER=1
          fi
          C=${{ env.compiler-C }} CXX=${{ env.compiler-CXX }} BUILD_TYPE="${{ matrix.profile }}" BUILD_TESTS=1 ./make
      - name: Test assembler
        shell: bash
        run: |
          "./build/${{ matrix.profile }}/assembler/test/testassembler"
      - name: Validate test fixtures are up to date
        shell: bash
        run: |
          set -eu
          BUILD_TYPE="${{ matrix.profile }}" ./vm/test/testdata/fixtures/assemble-all.sh

          git diff ./vm/test/testdata/fixtures/ > /tmp/diff
          if [ -n "$(cat /tmp/diff)" ]; then
            echo "Error: Your fixture binaries are not up to date!" >&2
            cat /tmp/diff
            # exit 1
          fi
      - name: Test VM
        shell: bash
        run: |
          "./build/${{ matrix.profile }}/vm/test/testvm"

  challenge:
    name: Validate challenge
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Install dependencies
        shell: bash
        run: |
          DEBIAN_FRONTEND=noninteractive sudo apt update
          DEBIAN_FRONTEND=noninteractive sudo apt install -y ${{ env.dependencies }}
      - name: Build
        shell: bash
        run: C=${{ env.compiler-C }} CXX=${{ env.compiler-CXX }} ./make
      - name: Validate challenge
        shell: bash
        run: ./validate-challenge.sh 2>&1